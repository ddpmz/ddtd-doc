import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as p,a as n,b as s,e as i,d as a}from"./app-531015dd.js";const l="/ddtd-doc/assets/image/cron-edit.png",u={},d=a(`<h2 id="基本介绍" tabindex="-1"><a class="header-anchor" href="#基本介绍" aria-hidden="true">#</a> 基本介绍</h2><p>定时任务是一种可以让程序按照预定的时间执行某些操作的功能，例如每天凌晨 3 点执行一次数据备份，每隔 5 分钟检查一次服务器状态等。</p><p>定时任务的实现也很简单，只需要实现如下 <code>Cron</code> 接口，将其注册就可以了。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// Cron 定时任务接口</span>
<span class="token keyword">type</span> Cron <span class="token keyword">interface</span> <span class="token punctuation">{</span>
	<span class="token comment">// GetName 获取任务名称</span>
	<span class="token function">GetName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span>
	<span class="token comment">// Execute 执行逻辑</span>
	<span class="token function">Execute</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>定时任务的执行逻辑在 <code>Execute</code> 方法中实现，<code>GetName</code> 方法返回任务名称，用于唯一标识定时任务。</p><p>任务统一放在 <code>internal\\crons</code> 目录下，每个任务一个文件，文件名为任务名称。</p><h2 id="使用示例" tabindex="-1"><a class="header-anchor" href="#使用示例" aria-hidden="true">#</a> 使用示例</h2><h3 id="新建任务文件" tabindex="-1"><a class="header-anchor" href="#新建任务文件" aria-hidden="true">#</a> 新建任务文件</h3><p>在 <code>internal\\crons</code> 目录下新建 <code>test.go</code> 文件，内容如下：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	cron<span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span>Test2<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// Test 测试任务（无参数）</span>
<span class="token keyword">var</span> Test <span class="token operator">=</span> <span class="token operator">&amp;</span>cTest<span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">&quot;test&quot;</span><span class="token punctuation">}</span>

<span class="token keyword">type</span> cTest <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	name <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>cTest<span class="token punctuation">)</span> <span class="token function">GetName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> c<span class="token punctuation">.</span>name
<span class="token punctuation">}</span>

<span class="token comment">// Execute 执行任务</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>cTest<span class="token punctuation">)</span> <span class="token function">Execute</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// ...业务逻辑</span>

  <span class="token comment">// 记录日志</span>
	g<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Infof</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">&quot;cron test Execute:%v&quot;</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果需要在 <code>Execute</code> 中接收参数，可以调用 <code>cron.GetArgs(ctx)</code> 例如：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>cTest2<span class="token punctuation">)</span> <span class="token function">Execute</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	args<span class="token punctuation">,</span> err <span class="token operator">:=</span> cron<span class="token punctuation">.</span><span class="token function">GetArgs</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		g<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Warningf</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">&quot;cron test2: %s&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中 args 为 <code>[]string</code> 类型</p><p>这样任务就建立好了，但是系统还不知道什么时候执行，需要在后台进行任务管理配置。</p><h3 id="管理任务" tabindex="-1"><a class="header-anchor" href="#管理任务" aria-hidden="true">#</a> 管理任务</h3><p>任务需要在后台管理面板进行配置，才能被系统执行。<br> 进入后台管理面板，点击左侧菜单 <code>系统管理</code> -&gt; <code>定时任务</code>，进入定时任务管理页面。</p><figure><img src="`+l+'" alt="定时任务编辑" width="500" tabindex="0" loading="lazy"><figcaption>定时任务编辑</figcaption></figure><h4 id="字段说明" tabindex="-1"><a class="header-anchor" href="#字段说明" aria-hidden="true">#</a> 字段说明</h4>',18),r=a("<li>任务分组 <ul><li>用于对任务进行分组，例如 <code>系统</code>、<code>用户</code>、<code>订单</code> 等</li></ul></li><li>任务名称 <ul><li>任务名称，与任务文件名保持一致</li></ul></li><li>执行参数 <ul><li>任务执行参数，多个参数用 <code>|</code> 分隔</li><li>如果要修改分隔符，可以修改 <code>internal\\consts\\cron.go</code> 中的 <code>CronSplitStr</code></li></ul></li><li>执行策略 <ul><li><strong>并行策略</strong>：每次执行任务时，都会启动一个新的协程执行任务</li><li><strong>单例策略</strong>：每次执行任务时，只会启动一个协程执行任务，如果上次任务还未执行完毕，则会跳过本次执行</li><li><strong>单次策略</strong>：任务只会执行一次，执行完毕后会自动修改状态为 <code>已结束</code></li><li><strong>多次策略</strong>：任务会按照设定的 <code>执行次数</code> 执行，完毕后会自动修改状态为 <code>已结束</code></li></ul></li><li>执行次数 <ul><li>任务执行次数，只有在 <code>执行策略</code> 为 <code>多次策略</code> 时才会生效</li></ul></li>",5),k=n("li",null,[s("任务执行的时间表达式，支持 "),n("code",null,"cron"),s(" 表达式，例如 "),n("code",null,"0 0 3 * * *"),s(" 表示每天凌晨 3 点执行")],-1),v={href:"https://goframe.org/pages/viewpage.action?pageId=30736411",target:"_blank",rel:"noopener noreferrer"},m=n("li",null,[s("状态 "),n("ul",null,[n("li",null,[s("任务状态，可选值："),n("code",null,"正常"),s("、"),n("code",null,"禁用"),s("，禁用状态的任务不会被执行")])])],-1);function g(b,h){const e=o("ExternalLinkIcon");return c(),p("div",null,[d,n("ul",null,[r,n("li",null,[s("定时表达式 "),n("ul",null,[k,n("li",null,[s("参考文档："),n("a",v,[s("https://goframe.org/pages/viewpage.action?pageId=30736411"),i(e)])])])]),m])])}const _=t(u,[["render",g],["__file","cron.html.vue"]]);export{_ as default};
