import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,d as e}from"./app-531015dd.js";const t={},p=e(`<h2 id="基本介绍" tabindex="-1"><a class="header-anchor" href="#基本介绍" aria-hidden="true">#</a> 基本介绍</h2><p>用于不相干的组件通信。<br> 比如当一个组件更新了数据，需要通知其他组件更新 ui 或数据，且他们不是不相干的组件。</p><h2 id="使用方法" tabindex="-1"><a class="header-anchor" href="#使用方法" aria-hidden="true">#</a> 使用方法</h2><h3 id="定义事件" tabindex="-1"><a class="header-anchor" href="#定义事件" aria-hidden="true">#</a> 定义事件</h3><p>首先需要定义事件类型，例如：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// src\\constants\\event-bus.ts</span>
<span class="token keyword">export</span> <span class="token keyword">enum</span> EventBusEventEnum <span class="token punctuation">{</span>
  <span class="token doc-comment comment">/** 消息已读变化 */</span>
  <span class="token constant">MESSAGE_UPDATE</span><span class="token punctuation">,</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="发送事件" tabindex="-1"><a class="header-anchor" href="#发送事件" aria-hidden="true">#</a> 发送事件</h3><p>当需要发送事件时，调用 <code>EventBus.emit</code> 方法：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> EventBusEventEnum <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@/constants/event-bus&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> eventBus <span class="token keyword">from</span> <span class="token string">&quot;@/utils/event-bus&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 当读取新消息时，发送消息已读变化事件</span>
<span class="token keyword">const</span> <span class="token function-variable function">onUpdateData</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  eventBus<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span>EventBusEventEnum<span class="token punctuation">.</span><span class="token constant">MESSAGE_UPDATE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="接收事件" tabindex="-1"><a class="header-anchor" href="#接收事件" aria-hidden="true">#</a> 接收事件</h3><p>在所有需要接收事件的组件中，调用 <code>EventBus.on</code> 方法：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> EventBusEventEnum <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@/constants/event-bus&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> eventBus <span class="token keyword">from</span> <span class="token string">&quot;@/utils/event-bus&quot;</span><span class="token punctuation">;</span>

eventBus<span class="token punctuation">.</span><span class="token function">useListener</span><span class="token punctuation">(</span>EventBusEventEnum<span class="token punctuation">.</span><span class="token constant">MESSAGE_UPDATE</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">reload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：<code>eventBus.useListener()</code> 方法中已经自动做了处理，在 <code>unmount</code> 时，会清除事件监听。</p>`,13),o=[p];function c(i,u){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","eventbus.html.vue"]]);export{r as default};
