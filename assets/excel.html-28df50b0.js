import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as e,o as p,c as o,a as s,b as n,e as c,d as i}from"./app-531015dd.js";const l={},u=s("h2",{id:"基本介绍",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#基本介绍","aria-hidden":"true"},"#"),n(" 基本介绍")],-1),r={href:"https://xuri.me/excelize/zh-hans/",target:"_blank",rel:"noopener noreferrer"},d=i(`<h2 id="导出示例" tabindex="-1"><a class="header-anchor" href="#导出示例" aria-hidden="true">#</a> 导出示例</h2><p>以访问日志导出为例：</p><h3 id="定义导出-model" tabindex="-1"><a class="header-anchor" href="#定义导出-model" aria-hidden="true">#</a> 定义导出 Model</h3><p><code>dc</code> 配置的是表头数据，顺序也是。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> AccessLogExportModel <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Id             <span class="token builtin">int64</span>  <span class="token string">\`dc:&quot;ID&quot;\`</span>
	Module         <span class="token builtin">string</span> <span class="token string">\`dc:&quot;操作模块&quot;\`</span>
	<span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="导出方法" tabindex="-1"><a class="header-anchor" href="#导出方法" aria-hidden="true">#</a> 导出方法</h3><p>参数条件一般可共用 <code>list</code> 的 <code>XXXinp</code> 参数，也可以单独定义。</p><p>Export 方法：</p><ol><li>查询出所有数据</li><li>调用 <code>ddutil.GetTagsFromStruct</code> 获取表头</li><li>将 <code>list</code> 转换为导出 Model 类型，有些字段需要转换，例如时间戳转换为字符串</li><li>调用 <code>excel.ExportByStructs</code> 导出</li></ol><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>sSysAccessLog<span class="token punctuation">)</span> <span class="token function">Export</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> in <span class="token operator">*</span>sysin<span class="token punctuation">.</span>AccessLogListInp<span class="token punctuation">)</span> <span class="token punctuation">(</span>err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 查询出所有数据</span>
	list<span class="token punctuation">,</span> count<span class="token punctuation">,</span> err <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">List</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> in<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">var</span> <span class="token punctuation">(</span>
		titleList  <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token comment">// 表头</span>
		exportList <span class="token punctuation">[</span><span class="token punctuation">]</span>sysin<span class="token punctuation">.</span>AccessLogExportModel
		fileName   <span class="token operator">=</span> <span class="token string">&quot;访问日志导出-&quot;</span> <span class="token operator">+</span> gctx<span class="token punctuation">.</span><span class="token function">CtxId</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>
		sheetName  <span class="token operator">=</span> <span class="token string">&quot;访问日志导出&quot;</span>
		row        sysin<span class="token punctuation">.</span>AccessLogExportModel
	<span class="token punctuation">)</span>
	titleList <span class="token operator">=</span> ddutil<span class="token punctuation">.</span><span class="token function">GetTagsFromStruct</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token function">new</span><span class="token punctuation">(</span>sysin<span class="token punctuation">.</span>AccessLogExportModel<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;dc&quot;</span><span class="token punctuation">)</span>

	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> list <span class="token punctuation">{</span>
		<span class="token keyword">if</span> err <span class="token operator">=</span> gconv<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token operator">&amp;</span>row<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span>
		<span class="token punctuation">}</span>
		row<span class="token punctuation">.</span>TakeUpTimeStr <span class="token operator">=</span> gconv<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span>TakeUpTime<span class="token punctuation">)</span>
		row<span class="token punctuation">.</span>EnterTimeStr <span class="token operator">=</span> gtime<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span>EnterTime<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		exportList <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>exportList<span class="token punctuation">,</span> row<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">if</span> err <span class="token operator">=</span> excel<span class="token punctuation">.</span><span class="token function">ExportByStructs</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> titleList<span class="token punctuation">,</span> gconv<span class="token punctuation">.</span><span class="token function">Interfaces</span><span class="token punctuation">(</span>exportList<span class="token punctuation">)</span><span class="token punctuation">,</span> fileName<span class="token punctuation">,</span> sheetName<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="导入示例" tabindex="-1"><a class="header-anchor" href="#导入示例" aria-hidden="true">#</a> 导入示例</h2><p>以字典导入为例:</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>字典导入功能常用于将开发时的字典数据导入到正式数据库中，减少手工创建工作量。</p></div><h3 id="定义导入数据接收-model" tabindex="-1"><a class="header-anchor" href="#定义导入数据接收-model" aria-hidden="true">#</a> 定义导入数据接收 Model</h3><p>此 <code>DictDataImportModel</code> 中可以定义验证规则，用于简单的数据验证。<br><strong>字段顺序必须与导入文件中的表头顺序一致，否则会数据与字段匹配不上</strong>。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// internal\\model\\input\\sysin\\dict_data.go</span>
<span class="token comment">// DictDataImportModel 字典数据导入模板</span>
<span class="token keyword">type</span> DictDataImportModel <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	FirstCateType  <span class="token builtin">string</span> <span class="token string">\`dc:&quot;一级分类标识&quot; v:&quot;required#一级分类标识不能为空&quot;\`</span>
	FirstCateName  <span class="token builtin">string</span> <span class="token string">\`dc:&quot;一级分类名称&quot; v:&quot;required#一级分类名称不能为空&quot;\`</span>
	SecondCateType <span class="token builtin">string</span> <span class="token string">\`dc:&quot;二级分类标识&quot; v:&quot;required#二级分类标识不能为空&quot;\`</span>
	SecondCateName <span class="token builtin">string</span> <span class="token string">\`dc:&quot;二级分类名称&quot; v:&quot;required#二级分类名称不能为空&quot;\`</span>
	DataLabel      <span class="token builtin">string</span> <span class="token string">\`dc:&quot;字典标签&quot; v:&quot;required#字典标签不能为空&quot;\`</span>
	DataValue      <span class="token builtin">string</span> <span class="token string">\`dc:&quot;字典值&quot; v:&quot;required#字典值不能为空&quot;\`</span>
	ValueTypeText  <span class="token builtin">string</span> <span class="token string">\`dc:&quot;键值数据类型&quot; v:&quot;required#键值数据类型不能为空&quot;\`</span>
	ListClass      <span class="token builtin">string</span> <span class="token string">\`dc:&quot;表格回显样式&quot; v:&quot;required#表格回显样式不能为空&quot;\`</span>
	StatusText     <span class="token builtin">string</span> <span class="token string">\`dc:&quot;状态&quot; v:&quot;required#状态不能为空&quot;\`</span>
	Sort           <span class="token builtin">int</span>    <span class="token string">\`dc:&quot;排序值&quot; v:&quot;required#排序值不能为空&quot;\`</span>
	Remark         <span class="token builtin">string</span> <span class="token string">\`dc:&quot;备注&quot;\`</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="导入方法" tabindex="-1"><a class="header-anchor" href="#导入方法" aria-hidden="true">#</a> 导入方法</h3><p>首先定义好方法类型，接收一个 <code>ghttp.UploadFile</code> 类型的参数，用于接收上传的文件。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// internal\\model\\input\\sysin\\dict_data.go</span>
<span class="token comment">// DictDataImportInp 字典数据导入</span>
<span class="token keyword">type</span> DictDataImportInp <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	File <span class="token operator">*</span>ghttp<span class="token punctuation">.</span>UploadFile <span class="token string">\`v:&quot;required#请上传导入文件&quot;\`</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>导入方法：</p><ol><li>调用 <code>excel.Import</code> 方法，将文件导入为 <code>[]g.Map</code> 类型的数据。</li><li>先进行验证，<strong>一定要先进行验证再转化为 <code>struct</code></strong>，否则 <code>struct</code> 默认值会影响验证结果，比如 <code>Sort</code> 为 int 类型，如果用于不填，则 <code>struct</code> 中的 <code>Sort</code> 值为 <code>0</code>，从而干扰 <code>required</code> 的验证。</li><li>调用 <code>gconv.Structs</code> 方法将 <code>[]g.Map</code> 类型的数据转换为 <code>[]*DictDataImportModel</code> 类型的数据。</li><li>保存到数据库逻辑，也可以进行复杂验证，有必要的情况下可以使用事务。</li></ol><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// internal\\logic\\sys\\dict_data.go</span>
<span class="token comment">// Import 导入</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>sSysDictData<span class="token punctuation">)</span> <span class="token function">Import</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> in <span class="token operator">*</span>sysin<span class="token punctuation">.</span>DictDataImportInp<span class="token punctuation">)</span> <span class="token punctuation">(</span>err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> <span class="token punctuation">(</span>
		importDataMap      <span class="token punctuation">[</span><span class="token punctuation">]</span>g<span class="token punctuation">.</span>Map
		dictDataImportList <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>sysin<span class="token punctuation">.</span>DictDataImportModel
	<span class="token punctuation">)</span>
	<span class="token comment">// 导入数据，获得数据[]g.Map</span>
	importDataMap<span class="token punctuation">,</span> err <span class="token operator">=</span> excel<span class="token punctuation">.</span><span class="token function">Import</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token operator">&amp;</span>excel<span class="token punctuation">.</span>ImportOptions<span class="token punctuation">{</span>
		File<span class="token punctuation">:</span>     in<span class="token punctuation">.</span>File<span class="token punctuation">,</span>
		Model<span class="token punctuation">:</span>    sysin<span class="token punctuation">.</span>DictDataImportModel<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
		StartRow<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token comment">// 验证</span>
	validateModel <span class="token operator">:=</span> sysin<span class="token punctuation">.</span>DictDataImportModel<span class="token punctuation">{</span><span class="token punctuation">}</span>
	<span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> importDataMap <span class="token punctuation">{</span>
		err <span class="token operator">=</span> g<span class="token punctuation">.</span><span class="token function">Validator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Data</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Assoc</span><span class="token punctuation">(</span>validateModel<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			err <span class="token operator">=</span> gerror<span class="token punctuation">.</span><span class="token function">Wrapf</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> <span class="token string">&quot;第%d行验证出错: %v&quot;</span><span class="token punctuation">,</span> k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> err<span class="token punctuation">.</span><span class="token punctuation">(</span>gvalid<span class="token punctuation">.</span>Error<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token keyword">return</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 转换导入map数据为structs</span>
	err <span class="token operator">=</span> gconv<span class="token punctuation">.</span><span class="token function">Structs</span><span class="token punctuation">(</span>importDataMap<span class="token punctuation">,</span> <span class="token operator">&amp;</span>dictDataImportList<span class="token punctuation">)</span>
	g<span class="token punctuation">.</span><span class="token function">Dump</span><span class="token punctuation">(</span>dictDataImportList<span class="token punctuation">)</span>

	<span class="token comment">// 保存到数据库逻辑，也可以进行复杂验证，有必要的情况下可以使用事务。</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> dictDataImportList <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,22);function k(v,m){const a=e("ExternalLinkIcon");return p(),o("div",null,[u,s("p",null,[n("支持简单的二维数据导入、导出，复杂表头请参考"),s("a",r,[n("excelize"),c(a)]),n("。")]),d])}const q=t(l,[["render",k],["__file","excel.html.vue"]]);export{q as default};
